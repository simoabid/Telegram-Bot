import { xpRange } from '../lib/levelling.js';
import axios from 'axios';

const clockString = ms => {
  const h = Math.floor(ms / 3600000);
  const m = Math.floor(ms / 60000) % 60;
  const s = Math.floor(ms / 1000) % 60;
  return [h, m, s].map(v => v.toString().padStart(2, '0')).join(':');
};

const saludarSegunHora = () => {
  const hora = new Date().getHours();
  if (hora >= 5 && hora < 12) return 'üåÑ Buenos d√≠as';
  if (hora >= 12 && hora < 19) return 'üåû Buenas tardes';
  return 'üåô Buenas noches';
};

const img = 'https://cdn-sunflareteam.vercel.app/images/fe2072569a.jpg';

const sectionDivider = '‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚≠ì';

const menuFooter = `
‚ï≠‚îÄ‚ùí „Äåüìå INFO FINAL„Äç
‚îÇ ‚ö†Ô∏è Usa los comandos con el prefijo correspondiente
‚îÇ üìå Ejemplo:/ping | /menu
‚îÇ üõ°Ô∏è Creado por Barboza-Team
‚ï∞‚ùí
`.trim();

const handler = async (m, { bot, usedPrefix }) => {
  try {
    const saludo = saludarSegunHora();
    const user = global.db.data.users[m.sender] || { level: 1, exp: 0, limit: 5 };
    const { exp, level, limit } = user;
    const { min, xp } = xpRange(level, global.multiplier || 1);
    const totalUsers = Object.keys(global.db.data.users).length;
    const mode = global.opts?.self ? 'Privado üîí' : 'P√∫blico üåê';
    const uptime = clockString(process.uptime() * 1000);
    const userName = m.from.first_name + (m.from.last_name ? ' ' + m.from.last_name : '');
    const tagUsuario = `@${m.from.username || m.sender}`;

    const text = [
      "*Etiqueta General X Sasuke*",
      "ùôàùôöùô£ùôòùôûùô§ùô£ ùôÇùôöùô£ùôöùôßùôñùô°",
      "ùôÄùô©ùôûùô¶ùô™ùôöùô©ùôñùô£ùôôùô§ ùôñ ùô°ùô§ùô® ùôâùôãùòæ"
    ].getRandom();
    const imgRandom = [
      "https://iili.io/FKVDVAN.jpg",
      "https://iili.io/FKVbUrJ.jpg"
    ].getRandom();

    // --- Inicio del c√≥digo arreglado ---
    let thumbnailBuffer;
    try {
      const response = await axios.get(imgRandom, { responseType: 'arraybuffer' });
      thumbnailBuffer = Buffer.from(response.data);
    } catch (e) {
      console.error('‚ùå Error al descargar la imagen para el quoted:', e);
      // Usar una imagen de respaldo o un buffer vac√≠o si falla
      // Si usas un buffer vac√≠o, aseg√∫rate de que el resto del c√≥digo lo maneje.
      thumbnailBuffer = Buffer.from('');
    }
    // --- Fin del c√≥digo arreglado ---

    const izumi = {
      key: { participants: "0", fromMe: false, id: "Halo" },
      message: {
        locationMessage: {
          name: text,
          jpegThumbnail: thumbnailBuffer,
          vcard:
            "BEGIN:VCARD\nVERSION:3.0\nN:;Unlimited;;;\nFN:Unlimited\nORG:Unlimited\nTITLE:\n" +
            "item1.TEL;waid=19709001746:+1 (970) 900-1746\nitem1.X-ABLabel:Unlimited\n" +
            "X-WA-BIZ-DESCRIPTION:ofc\nX-WA-BIZ-NAME:Unlimited\nEND:VCARD"
        }
      },
      participant: "0"
    };
    // --- Fin del c√≥digo agregado ---

    let categorizedCommands = {};
    Object.values(global.plugins)
      .filter(p => p?.help && !p.disabled)
      .forEach(p => {
        const tag = Array.isArray(p.tags) ? p.tags[0] : p.tags || 'Otros';
        const cmds = Array.isArray(p.help) ? p.help : [p.help];
        categorizedCommands[tag] = categorizedCommands[tag] || new Set();
        cmds.forEach(cmd => categorizedCommands[tag].add('/' + cmd));
      });

    const categoryEmojis = {
      // Main categories
      anime: 'üé≠', info: '‚ÑπÔ∏è', search: 'üîé', diversi√≥n: 'üéâ', subbots: 'ü§ñ',
      rpg: 'üåÄ', registro: 'üìù', sticker: 'üé®', imagen: 'üñºÔ∏è', logo: 'üñåÔ∏è',
      premium: 'üéñÔ∏è', configuraci√≥n: '‚öôÔ∏è', descargas: 'üì•', herramientas: 'üõ†Ô∏è',
      nsfw: 'üîû', 'base de datos': 'üìÄ', audios: 'üîä', freefire: 'üî•', otros: 'ü™™',

      // Additional categories from plugins
      main: 'üè†', dl: 'üì•', downloader: 'üì•', downloads: 'üì•', download: 'üì•',
      internet: 'üåê', buscador: 'üîç', search: 'üîé', tools: 'üõ†Ô∏è', tool: 'üõ†Ô∏è',
      game: 'üéÆ', games: 'üéÆ', juegos: 'üéÆ', fun: 'üéâ', entretenimiento: 'üé™',
      group: 'üë•', grupos: 'üë•', admin: 'üëë', owner: 'üëë', propietario: 'üëë',
      ai: 'ü§ñ', ia: 'ü§ñ', artificial: 'ü§ñ', bot: 'ü§ñ',
      media: 'üì±', multimedia: 'üì±', convert: 'üîÑ', convertir: 'üîÑ',
      economy: 'üí∞', econom√≠a: 'üí∞', coins: 'ü™ô', monedas: 'ü™ô',
      level: 'üìä', nivel: 'üìä', exp: '‚≠ê', experiencia: '‚≠ê',
      random: 'üé≤', aleatorio: 'üé≤', meme: 'üòÇ', memes: 'üòÇ',
      music: 'üéµ', m√∫sica: 'üéµ', audio: 'üîä', sound: 'üîä',
      video: 'üé¨', videos: 'üé¨', movie: 'üé¨', pel√≠culas: 'üé¨',
      social: 'üì±', redes: 'üì±', instagram: 'üì∑', tiktok: 'üéµ', youtube: 'üì∫',
      utility: '‚öôÔ∏è', utilidad: '‚öôÔ∏è', misc: 'üîß', varios: 'üîß'
    };

    const menuBody = Object.entries(categorizedCommands).map(([title, cmds]) => {
      const emoji = categoryEmojis[title.toLowerCase()] || 'üìÅ';
      const list = [...cmds].map(cmd => `‚îÇ ‚ó¶ ${cmd}`).join('\n');
      return `‚ï≠‚îÄ„Äå ${emoji} ${title.toUpperCase()} „Äç\n${list}\n${sectionDivider}`;
    }).join('\n\n');

    const header = `
${saludo} ${tagUsuario} üëã

‚ï≠‚îÄ „Äå s·•≤s·•ôk·•± ·ë≤·•Üùóç m·É´ üåÄ „Äç
‚îÇ üë§ Nombre: ${userName}
‚îÇ üéñ Nivel: ${level} | XP: ${exp - min}/${xp}
‚îÇ üîì L√≠mite: ${limit}
‚îÇ üß≠ Modo: ${mode}
‚îÇ ‚è±Ô∏è Tiempo activo: ${uptime}
‚îÇ üåç Usuarios registrados: ${totalUsers}
‚ï∞‚îÄ‚ùí
`.trim();

    const fullMenu = `${header}\n\n${menuBody}\n\n${menuFooter}`;

    // Fix: Use different variable name to avoid shadowing the bot parameter
    const botSettings = global.db.data.settings[bot.user?.id] || {}
    let bannerr = botSettings.banner || 'https://raw.githubusercontent.com/WillZek/CrowBot-ST/main/media/catalogo.jpg'

    // Check if the full menu is too long for Telegram (4096 character limit)
    if (fullMenu.length > 4000) {
      // Split menu into multiple messages
      const menuParts = [];
      const categories = Object.entries(categorizedCommands);
      let currentPart = header + '\n\n';

      for (let i = 0; i < categories.length; i++) {
        const [title, cmds] = categories[i];
        const emoji = categoryEmojis[title.toLowerCase()] || 'üìÅ';
        const list = [...cmds].map(cmd => `‚îÇ ‚ó¶ ${cmd}`).join('\n');
        const categorySection = `‚ï≠‚îÄ„Äå ${emoji} ${title.toUpperCase()} „Äç\n${list}\n${sectionDivider}`;

        // Check if adding this category would exceed the limit
        if ((currentPart + categorySection + '\n\n' + menuFooter).length > 4000) {
          // Send current part and start a new one
          menuParts.push(currentPart.trim());
          currentPart = categorySection + '\n\n';
        } else {
          currentPart += categorySection + '\n\n';
        }
      }

      // Add the last part with footer
      if (currentPart.trim()) {
        currentPart += menuFooter;
        menuParts.push(currentPart.trim());
      }

      // Send all parts
      for (let i = 0; i < menuParts.length; i++) {
        const partHeader = i === 0 ? '' : `üìã **Men√∫ Parte ${i + 1}/${menuParts.length}**\n\n`;
        await bot.sendMessage(m.chat, partHeader + menuParts[i], {
          reply_to_message_id: i === 0 ? m.id : undefined
        });

        // Small delay between messages to avoid rate limiting
        if (i < menuParts.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 500));
        }
      }
    } else {
      // Send full menu as single message
      await bot.sendMessage(m.chat, fullMenu, {
        reply_to_message_id: m.id
      });
    }

  } catch (e) {
    console.error('‚ùå Error al generar el men√∫:', e);
    await bot.reply(m.chat, '‚ö†Ô∏è Ocurri√≥ un error al mostrar el men√∫.', m);
  }
};

handler.command = ['menu', 'help', 'men√∫'];
export default handler;
